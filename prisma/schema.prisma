generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  emailVerified      DateTime?
  name               String?
  image              String?
  bio                String?
  favoriteTeams      String[]
  role               UserRole          @default(USER)
  currentStreak      Int               @default(0)
  longestStreak      Int               @default(0)
  lastActiveDate     DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  experienceTier     ExperienceTier    @default(ROOKIE)
  totalPoints        Int               @default(0)
  accounts           Account[]
  challengesReceived Challenge[]       @relation("Challenged")
  challengesSent     Challenge[]       @relation("Challenger")
  friendOf           Friend[]          @relation("FriendOf")
  friends            Friend[]          @relation("UserFriends")
  mediaUploads       Media[]
  notifications      Notification[]
  reports            QuestionReport[]
  quizAttempts       QuizAttempt[]
  leaderboardEntries QuizLeaderboard[]
  reviews            QuizReview[]
  sessions           Session[]
  badges             UserBadge[]
  searchQueries      UserSearchQuery[]
  topicStats         UserTopicStats[]
  completionAwards   QuizCompletionBonusAward[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id               String            @id @default(cuid())
  name             String            @unique
  slug             String            @unique
  description      String?
  displayEmoji     String?
  displayImageUrl  String?
  parentId         String?
  level            Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  questions        Question[]
  quizTopicConfigs QuizTopicConfig[]
  parent           Topic?            @relation("TopicHierarchy", fields: [parentId], references: [id])
  children         Topic[]           @relation("TopicHierarchy")
  userStats        UserTopicStats[]

  @@index([parentId])
  @@index([slug])
}

model Quiz {
  id                     String                @id @default(cuid())
  title                  String
  slug                   String                @unique
  description            String?
  descriptionImageUrl    String?
  descriptionVideoUrl    String?
  sport                  String?
  difficulty             Difficulty            @default(MEDIUM)
  status                 QuizStatus            @default(DRAFT)
  duration               Int?
  timePerQuestion        Int?
  passingScore           Int                   @default(70)
  completionBonus        Int                   @default(0)
  questionSelectionMode  QuestionSelectionMode @default(FIXED)
  questionCount          Int?
  randomizeQuestionOrder Boolean               @default(false)
  showHints              Boolean               @default(true)
  negativeMarkingEnabled Boolean               @default(false)
  penaltyPercentage      Int                   @default(25)
  timeBonusEnabled       Boolean               @default(false)
  bonusPointsPerSecond   Float                 @default(0)
  startTime              DateTime?
  endTime                DateTime?
  answersRevealTime      DateTime?
  recurringType          RecurringType         @default(NONE)
  lastRefreshedAt        DateTime?
  isDuplicated           Boolean               @default(false)
  originalQuizId         String?
  averageRating          Float                 @default(0)
  totalReviews           Int                   @default(0)
  seoTitle               String?
  seoDescription         String?
  seoKeywords            String[]
  isPublished            Boolean               @default(false)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  isFeatured             Boolean               @default(false)
  attemptResetPeriod     AttemptResetPeriod    @default(NEVER)
  maxAttemptsPerUser     Int?
  challenges             Challenge[]
  attempts               QuizAttempt[]
  leaderboard            QuizLeaderboard[]
  questionPool           QuizQuestionPool[]
  reviews                QuizReview[]
  tags                   QuizTagRelation[]
  topicConfigs           QuizTopicConfig[]
  completionAwards       QuizCompletionBonusAward[]

  @@index([slug])
  @@index([sport])
  @@index([difficulty])
  @@index([status])
  @@index([isPublished])
}

model QuizCompletionBonusAward {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  awardedAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([quizId, userId])
  @@index([quizId])
  @@index([userId])
}

model QuizTag {
  id          String            @id @default(cuid())
  name        String            @unique
  slug        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  quizzes     QuizTagRelation[]

  @@index([slug])
}

model QuizTagRelation {
  id        String   @id @default(cuid())
  quizId    String
  tagId     String
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  tag       QuizTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([quizId, tagId])
  @@index([quizId])
  @@index([tagId])
}

model QuizTopicConfig {
  id            String     @id @default(cuid())
  quizId        String
  topicId       String
  difficulty    Difficulty
  questionCount Int
  createdAt     DateTime   @default(now())
  quiz          Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  topic         Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([quizId, topicId, difficulty])
  @@index([quizId])
  @@index([topicId])
}

model QuizQuestionPool {
  id         String   @id @default(cuid())
  quizId     String
  questionId String
  order      Int?
  points     Int      @default(1)
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([quizId, questionId])
  @@index([quizId])
  @@index([questionId])
  @@index([quizId, order])
}

model Question {
  id                   String             @id @default(cuid())
  type                 QuestionType       @default(MULTIPLE_CHOICE)
  topicId              String
  difficulty           Difficulty         @default(MEDIUM)
  questionText         String
  questionImageUrl     String?
  questionVideoUrl     String?
  questionAudioUrl     String?
  hint                 String?
  explanation          String?
  explanationImageUrl  String?
  explanationVideoUrl  String?
  randomizeAnswerOrder Boolean            @default(false)
  timeLimit            Int?
  timesAnswered        Int                @default(0)
  timesCorrect         Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  answers              Answer[]
  topic                Topic              @relation(fields: [topicId], references: [id])
  reports              QuestionReport[]
  quizPools            QuizQuestionPool[]
  userAnswers          UserAnswer[]

  @@index([topicId])
  @@index([difficulty])
  @@index([type])
}

model Answer {
  id             String       @id @default(cuid())
  questionId     String
  answerText     String
  answerImageUrl String?
  answerVideoUrl String?
  answerAudioUrl String?
  isCorrect      Boolean      @default(false)
  displayOrder   Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers    UserAnswer[]

  @@index([questionId])
}

model QuizAttempt {
  id                  String       @id @default(cuid())
  userId              String
  quizId              String
  selectedQuestionIds String[]
  score               Float        @default(0)
  totalQuestions      Int          @default(0)
  correctAnswers      Int          @default(0)
  passed              Boolean      @default(false)
  isPracticeMode      Boolean      @default(false)
  isPaused            Boolean      @default(false)
  resumeToken         String?      @unique
  startedAt           DateTime     @default(now())
  completedAt         DateTime?
  averageResponseTime Float        @default(0)
  longestStreak       Int          @default(0)
  totalPoints         Int          @default(0)
  totalTimeSpent      Int          @default(0)
  quiz                Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAnswers         UserAnswer[]

  @@index([userId])
  @@index([quizId])
  @@index([completedAt])
}

model UserAnswer {
  id          String      @id @default(cuid())
  attemptId   String
  questionId  String
  answerId    String?
  isCorrect   Boolean     @default(false)
  wasSkipped  Boolean     @default(false)
  timeSpent   Int         @default(0)
  createdAt   DateTime    @default(now())
  basePoints  Int         @default(0)
  streakBonus Int         @default(0)
  timeBonus   Int         @default(0)
  totalPoints Int         @default(0)
  answer      Answer?     @relation(fields: [answerId], references: [id])
  attempt     QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question    Question    @relation(fields: [questionId], references: [id])

  @@index([attemptId])
  @@index([questionId])
}

model UserTopicStats {
  id                String    @id @default(cuid())
  userId            String
  topicId           String
  questionsAnswered Int       @default(0)
  questionsCorrect  Int       @default(0)
  successRate       Float     @default(0)
  averageTime       Float     @default(0)
  currentStreak     Int       @default(0)
  lastAnsweredAt    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  topic             Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([userId])
  @@index([topicId])
}

model QuizLeaderboard {
  id                  String   @id @default(cuid())
  quizId              String
  userId              String
  bestScore           Float
  bestTime            Int
  attempts            Int      @default(1)
  rank                Int      @default(999999)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  averageResponseTime Float    @default(0)
  bestPoints          Int      @default(0)
  quiz                Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([quizId, userId])
  @@unique([quizId, rank])
  @@index([quizId, bestPoints(sort: Desc), averageResponseTime])
  @@index([userId])
}

model Friend {
  id        String       @id @default(cuid())
  userId    String
  friendId  String
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  friend    User         @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  user      User         @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Challenge {
  id              String          @id @default(cuid())
  challengerId    String
  challengedId    String
  quizId          String
  challengerScore Float?
  challengedScore Float?
  status          ChallengeStatus @default(PENDING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  expiresAt       DateTime?
  challenged      User            @relation("Challenged", fields: [challengedId], references: [id], onDelete: Cascade)
  challenger      User            @relation("Challenger", fields: [challengerId], references: [id], onDelete: Cascade)
  quiz            Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([challengerId])
  @@index([challengedId])
  @@index([quizId])
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  imageUrl    String
  criteria    Json
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[]

  @@index([name])
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}

model QuizReview {
  id           String   @id @default(cuid())
  userId       String
  quizId       String
  rating       Int
  comment      String?
  helpfulCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
  @@index([quizId])
  @@index([rating])
}

model QuestionReport {
  id          String       @id @default(cuid())
  userId      String
  questionId  String
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([status])
}

model Media {
  id         String    @id @default(cuid())
  fileName   String
  fileUrl    String
  fileType   MediaType
  mimeType   String
  fileSize   Int
  bucket     String    @default("quiz-media")
  uploadedBy String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  uploader   User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([uploadedBy])
  @@index([fileType])
}

model AppSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String   @default("general")
  updatedAt DateTime @updatedAt
  updatedBy String?

  @@index([category])
}

model SearchQuery {
  id              String            @id @default(cuid())
  query           String
  context         SearchContext
  timesSearched   Int               @default(0)
  lastResultCount Int?
  lastSearchedAt  DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userEntries     UserSearchQuery[]

  @@unique([query, context])
  @@index([context, lastSearchedAt])
}

model UserSearchQuery {
  id             String      @id @default(cuid())
  userId         String
  searchQueryId  String
  timesSearched  Int         @default(0)
  lastSearchedAt DateTime    @default(now())
  searchQuery    SearchQuery @relation(fields: [searchQueryId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, searchQueryId])
  @@index([userId, lastSearchedAt])
}

enum UserRole {
  USER
  ADMIN
}

enum ExperienceTier {
  ROOKIE
  STARTER
  ALL_STAR
  LEGEND
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuizStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum QuestionSelectionMode {
  FIXED
  TOPIC_RANDOM
  POOL_RANDOM
}

enum RecurringType {
  NONE
  HOURLY
  DAILY
  WEEKLY
}

enum AttemptResetPeriod {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
}

enum QuestionType {
  MULTIPLE_CHOICE
  FILL_BLANK
  FLASHCARD
  IMAGE_BASED
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum SearchContext {
  QUIZ
  TOPIC
}
